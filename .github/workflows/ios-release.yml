name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products

      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: MIIMeQIBAzCCDEAGCSqGSIb3DQEHAaCCDDEEggwtMIIMKTCCBr8GCSqGSIb3DQEHBqCCBrAwggasAgEAMIIGpQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQIPYdFeZEOw0oCAggAgIIGeLzpsYSXjnsDmWLYOV5iaS9orVSyQN0dzQw5/w1VGjyQ8gPmjYDCiYh47Ul8/GpWZi9ckJGwRx14EDT3SKZ7Nd+yag9rnw2Ek9ewDwnM7CEwiybMmRC105iKc+HtFL6dQhbdTGGTFnsUaFS7wj1UWCGe2VWooPA7Z0Te39EuWoS9jMNf27YEdXGl5v/Y/3mlnOWH891LlD8j0aK8GJzfClLGFgR6UftsZWJT5UVJoo6+O14b6F7UBdXm8qVLFNTE+c64ogN/v31L0i53XfUzpSywyCEWXTMzGaIxFd8ZloYrGrPxc0opbmYvVAHicvx8FHHvN25f5lgcm1WWUnbaB5YxfX+rhqu4wmbutxibtuRUDBs3l4lHYBCdLzKrOaLs4MhpoCV3SfH+F6tvvBFhTyed8//rm9hfvDmjkMAThhB2zH2wNJ3eM3Ws/86t/L79rN45f+OzYN11H+M312194ry/44tQteSGBgfAtWH6LEDfp1JPzoTqhtX6MYvxaMoSENZstBDuhuK6pCDMjylB9hiPHKPdN+SVZrD4vjNvbT5xZN1jYaahvHg/jB6nD23I2Py2RUF4aa3jHtPKpkKFIT+fMfYVvdjo2FCIOjB2KMNm/wVT1GrbwRepZTEjI9Z3vzphJzNOescRJGGG0wKTwdsqAXFuggIoONRC9QdV9bQ9QBUfBkiInS07ogNdX6GU+a7CMod9KXDCqH7s55supkzka4ctRrer2/75FT1xICPub4SJX77fsCGGQ0GdAFx0zrNmsV+ymKI0KYFJ1RIUKApDZ/ZEKLv7Ki35yCl0uSdG+VPCMMbsGvuwSwP8RGL1r5/R85ax6KUurCahke9uBrrf4/HosspwRCqZnvKN1ywRlQ9bB8bdzXYMCFfMC7nzvXLv3PnnjibjWJRdTqWa/UxWJnOjGFrzxD7oxF0ww+MYl6N4FmGJ7v5eVlj3djb62xOCbK4AP2wKyWElpVRj1L1yFUz9YFTPIzeDiKOsJ6OpLf05AY2255jhWbtEOJk6GzieKkutKQPQHkD+8a5817Zs726ftBJW73agCdff6FH1VKGliqoDMyoV11PdMJV9MbLEPmncEVhDnM6HJwy//TFECyDWZ6HRpEPjXTmtwlUEMldAOLjRqsdfxfxUNpiw1Kj2G+vY7lO27GwO/I3UYs/HCQUDeRZoM4R2BhqK4dmiF1dR4c4nN6iT7HCxkGzH00Bl5DFglJ4rRbLPXf3oyNLIC/LNfRM4F/+sgeNPyhLjuCqZh8HfOQbDI4jj66WdACL1ekqiT5iKBLPm7Kug6PfgAp3K9+oE7paKSx4b/BV1rLhwrNx60jRYKyjztZG3+/Tu70WBJChMVJdQE8cp/io+9nakAfLnwNRK/EqKnUFNgwdvDeKta7Ra6B/JazuUYUhpqz5TPFvY0uvlaOLI91S6fD5IEglOba1jG/DPoHApwNx0epotR+OUOBVRINreNlRij1c9aCIIOI0HX3ZjCK1kgxQ6cFqGY5GeIVT00Y6lnv/h0BJRljrwugy7z58LOTlfg870rpRxCEt/Mk4t5ju+j+oreUWbdIrAjzydvn6bSKqFmRkEiTo9yHjcSxfYIxLlk2f2NGLCHpMhelklwjnYKUR4vbv8qXLSJqRyrkXaGf5oyUQvLAC9k3RcH7tkJI+isJzI9P+H7/TmfRWZ6CjihJhcKFIUScq7ubpAq1UD0hLc9pOF+vh7n9MUvLdZHq4DJ4Jekgcevj3n/QBT97KdEwxhCcD2YzdPX1ZH8W3qTf/McV8D7eqwmM82v/KER0Ortaqdi/rjOcU3H/lYFF6VPZuG91ptlGYK874jjV9ixdUZQ5eVXtWf32U9/A9LJ3PIxgeWYfBQIc79nnBExltBnhOA9nt0ZgMQH7avkklElRsbWsS7FY3JBHN73djjBuf0pK2Pole9Z+sI0OD7hqtL2rJiEVZuXLd8ykylwDvKP4ua8uZC7TUs9YCRca9/cDh53m1i1T+8Q8jjs8eeWFNAPWkoOjaa2/F1xKlu0dhSPPY9Ro29+NioqoW9rfoZ9JFBXAAgqUV9XVgIiMqvMUZXAyWu6cqQHdLXD7CoJ0/efUO+mh4kSV6AXu0Cv7lJgKHS8xwN5Aa9Xi8ROkmzTzCLz0jcFBrt3ZgT5hs0sNvvzGee9gCnV5bgECPQyXkVc0W3oLWRPlmTmMm10701zlm0fFNKJsvNJDCCBWIGCSqGSIb3DQEHAaCCBVMEggVPMIIFSzCCBUcGCyqGSIb3DQEMCgECoIIE7jCCBOowHAYKKoZIhvcNAQwBAzAOBAgLrfoIzii8igICCAAEggTI0bE7sVSPktJ8Kw9ELjrtxyfg6cqkrqPvnB9rx+3hGYnKroBKX19aK3NLXcJxck113G4AnVMol0MsapXQmWW876BPzoS0SG1Qh9QnsrSPphEB5ygD3m1382Par928jG9xoi1tnK68DHex0sBBBaqBzCTs3O7RS/UCf6vzn8FdfA00GjVF4GzMbPZnfQ0bXE2icrRY0QQcmY3GxayDiidttRRIgCmhNRzXDnkTqxEKDqyQH4pudmlp5QuWcggghIBA6cZBE6A2LMKjvdoNYgFR+zx++hCFDUjW6vBCIIf9bx19aLbAd1rY64Bg1szCFcXwh/Ph/dK9dYtU3SzBa1TtSHegmiclWqkTMPFuAJz0QRhBeQws83GTbU0bO5mIDHZuMCC+cNnm9cvmVwd4dAjUoGiEfIv4H1ep7elArq2aB/kfvpSvtKSTzLyv7/5ZVE/UmM9s1y2wJd+jqD+6hT1P9TqtHdRInRuxrZ+jWiF1BHwSKtt0Jnz4IQ+PrYDcsEaKvsl00DHshhbec8paUf46LaOKy/pdvcKIYPngqfcNFUJU4w7YhJUbVzmKMP9WxqEGdkq37Lm+lwMKqF19jyYewwT67KtzpfKJuEg6aFT+bel1soRuDhJiV0fvy4Y26i7ux5aMDh072exabapUZngeBBLRNPIx4e0O96HZW7SyjuotXoBk82cfXLmhWRnOE+di8AtTfS6S4hnQ4KjjAuTDyMEVfW5cqT+nGr1rO6+Eb0dCdiCV5AcFYUVqSodHhpSFtn2ASsR6LTDvJjevOi9qOzLpPilzsxj3wp24VPmWoDESgxBSuuyk4/YzC9WjB7N7XBs7NQA5cReBkJGkrufaPxIOW0+300fho5nGx1Xv6Lq4L7P/Jj1FuDIqmhnbnvQrfYiJxgVrckxa8K2QTzrwqz8XaLK7aJwBTRYFEznwVGmDv09zudnXWkMStNHzuDi6CBUhd6A8uD2Vcep/ifwQiwuyJJdPyjDHOfsNsXVK6jm0zTt6AvzKyZfNTchp2OYFp4C8XyMxOmcSNuusBAbGcGyPv6PVG6DXHEMX6kIEvfXBP0kacGxpB6OX6w2UCoM+nSk2QtxOzipOa69DfP4cf15TYpqrxgcfv64Tga79vnPGQZK6dLhyaCUU+790RizaChYgM19H9RHcgAil5p+SrAVYoMi5xqD4L0S46LC4oiktVFfmeJUDLTQPHT0ujiC0vJbFylDcGVdC3hVYJiWHKPjy6GPKpvQfMf3NE6JTVVx3gtPlhrElwWH+U9wqz+yRGY/nl0K/U1SzRehXGU1rWIv4V3oYC9bMV5X6g7qKMS3dFRkpYenlfBFXNESTrt3gvm+90qjgYja/djAahGWUZXyS7vsnuccs7rvsogiiULURAQDHcCd/UFLPLAggU6bX7czGcYORYScR0B5hnE5eW2xMAgVI7Os/VnAuN2yvXA527anNLYKXhZlCJDSErdxYCWilIHoxxTA0Bzq+QtvUusihwzmfXT7iHgFha6UPUd/V0C6AlYL277lrCLR1yq0MXhxPak3cDoeUd6TqjxNWFy+xy1L4CfSNeCCrvFhswf5aQTnVfKZAqa27PtnEx1hSqObsygrR5wEOBXHr6Cpu+l+zjlumrfaUMUYwHwYJKoZIhvcNAQkUMRIeEABhAGQAbQBpAG4AbABxAHgwIwYJKoZIhvcNAQkVMRYEFKhRauWEvm1KIRC4612Eq3XnKrYuMDAwITAJBgUrDgMCGgUABBSi2Ci0rOjnpTcfodOwdWvPknpVKAQI6D7bZT9FbeMCAQE=
          
          certificate-password: 111111
          
          provisioning-profile-base64: MIIw3wYJKoZIhvcNAQcCoIIw0DCCMMwCAQExCzAJBgUrDgMCGgUAMIIg7AYJKoZIhvcNAQcBoIIg3QSCINk8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYtOCI/Pgo8IURPQ1RZUEUgcGxpc3QgUFVCTElDICItLy9BcHBsZS8vRFREIFBMSVNUIDEuMC8vRU4iICJodHRwOi8vd3d3LmFwcGxlLmNvbS9EVERzL1Byb3BlcnR5TGlzdC0xLjAuZHRkIj4KPHBsaXN0IHZlcnNpb249IjEuMCI+CjxkaWN0PgoJPGtleT5BcHBJRE5hbWU8L2tleT4KCTxzdHJpbmc+Y29tUldHQkZaQTJZTjwvc3RyaW5nPgoJPGtleT5BcHBsaWNhdGlvbklkZW50aWZpZXJQcmVmaXg8L2tleT4KCTxhcnJheT4KCTxzdHJpbmc+UldHQkZaQTJZTjwvc3RyaW5nPgoJPC9hcnJheT4KCTxrZXk+Q3JlYXRpb25EYXRlPC9rZXk+Cgk8ZGF0ZT4yMDI1LTEwLTE3VDAyOjE2OjQ0WjwvZGF0ZT4KCTxrZXk+UGxhdGZvcm08L2tleT4KCTxhcnJheT4KCQk8c3RyaW5nPmlPUzwvc3RyaW5nPgoJCTxzdHJpbmc+eHJPUzwvc3RyaW5nPgoJCTxzdHJpbmc+dmlzaW9uT1M8L3N0cmluZz4KCTwvYXJyYXk+Cgk8a2V5PklzWGNvZGVNYW5hZ2VkPC9rZXk+Cgk8ZmFsc2UvPgoJPGtleT5EZXZlbG9wZXJDZXJ0aWZpY2F0ZXM8L2tleT4KCTxhcnJheT4KCQk8ZGF0YT5NSUlGcnpDQ0JKZWdBd0lCQWdJUU83c0ZnV2RMU1BvcHNmNkkwcEQ2YnpBTkJna3Foa2lHOXcwQkFRc0ZBREIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSTFNVEF4TnpBeU1EUTBNRm9YRFRJMk1UQXhOekF5TURRek9Wb3dnWW94R2pBWUJnb0praWFKay9Jc1pBRUJEQXBTVjBkQ1JscEJNbGxPTVRVd013WURWUVFEREN4cFVHaHZibVVnUkdsemRISnBZblYwYVc5dU9pQmlZV2xqZFc0Z2JHbHVJQ2hTVjBkQ1JscEJNbGxPS1RFVE1CRUdBMVVFQ3d3S1VsZEhRa1phUVRKWlRqRVRNQkVHQTFVRUNnd0tZbUZwWTNWdUlHeHBiakVMTUFrR0ExVUVCaE1DUTA0d2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNpZVZxelpPNy9WbWV6dllWQktTSGJUMUdOc1YzMEEyaDMzclJxTS8reXl2VTh6U0E3NVB3MCs5SG85VVJlNGFVczhDMHdOeWthN1NBN0NqM0twRW1MRjdFZkdQcHRsSzVjZXoxWXRuRW9mc1JVcHhlVU1jNmIwSktDNWFNb2xWVHZZZkF5dUk1Rnd0aUhFT3JJS1N6dTNLZEVGQ0Zwb3ZrblBESUZOZmZ5L3ozVmNGdVJrSXBvNCtYb2M2OWNPcUpWdlZpZkVoR2R0cWlJY0FlNEhLNnB5MUEzYS92RnhkUEpIWEFyZFR4ZkJWdVlPZSsxU2hIVzl0K3c2Q1R0M25DZmphT1BhTTAzYm1lY1UxZTNLd2ZxelZObEhxVSs4aFJxaXlvd00vUWdxUUVEUGpxNUVoM2hQVVNUOFgvNkFWdmVhRWVsS2tMd0VlUWxZVkROcmd6eEFnTUJBQUdqZ2dJak1JSUNIekFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGQW4rd0JXUSthOWtDcElTdVNZb1l3eVg3S2V5TUhBR0NDc0dBUVVGQndFQkJHUXdZakF0QmdnckJnRUZCUWN3QW9ZaGFIUjBjRG92TDJObGNuUnpMbUZ3Y0d4bExtTnZiUzkzZDJSeVp6TXVaR1Z5TURFR0NDc0dBUVVGQnpBQmhpVm9kSFJ3T2k4dmIyTnpjQzVoY0hCc1pTNWpiMjB2YjJOemNEQXpMWGQzWkhKbk16QXlNSUlCSGdZRFZSMGdCSUlCRlRDQ0FSRXdnZ0VOQmdrcWhraUc5Mk5rQlFFd2dmOHdnY01HQ0NzR0FRVUZCd0lDTUlHMkRJR3pVbVZzYVdGdVkyVWdiMjRnZEdocGN5QmpaWEowYVdacFkyRjBaU0JpZVNCaGJua2djR0Z5ZEhrZ1lYTnpkVzFsY3lCaFkyTmxjSFJoYm1ObElHOW1JSFJvWlNCMGFHVnVJR0Z3Y0d4cFkyRmliR1VnYzNSaGJtUmhjbVFnZEdWeWJYTWdZVzVrSUdOdmJtUnBkR2x2Ym5NZ2IyWWdkWE5sTENCalpYSjBhV1pwWTJGMFpTQndiMnhwWTNrZ1lXNWtJR05sY25ScFptbGpZWFJwYjI0Z2NISmhZM1JwWTJVZ2MzUmhkR1Z0Wlc1MGN5NHdOd1lJS3dZQkJRVUhBZ0VXSzJoMGRIQnpPaTh2ZDNkM0xtRndjR3hsTG1OdmJTOWpaWEowYVdacFkyRjBaV0YxZEdodmNtbDBlUzh3RmdZRFZSMGxBUUgvQkF3d0NnWUlLd1lCQlFVSEF3TXdIUVlEVlIwT0JCWUVGS2hSYXVXRXZtMUtJUkM0NjEyRXEzWG5Lcll1TUE0R0ExVWREd0VCL3dRRUF3SUhnREFUQmdvcWhraUc5Mk5rQmdFRUFRSC9CQUlGQURBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVRGTk1JVThXYzltbnhBTjMzbHhGRFNPV0R2cFpZL0xtRFVUZTU4THRlYWhEVUQzOXZBSlQxTW1hczhwMlhNWlNMcWtyaC8zeExsMEtaMTlra1pTQVdDdWJYS00vUVJuaXRHc0l5NmpsQmlXV241TjRlWStKZHJER0kwTVJ1N0VMdmIwYjNUcXBNVDl6SGU1MU0vdWI2eWNVd0NKMHhOWTdGbXdVL0pHRkJUbzcxL3NSR2V1TytXdU9DVGJFTHM4aXdBTDhzaU1nUjBXSVJwcTNSNDNKQ0xaUTdwMjBMdW1UZ3pjd1pRNEpyL2kyVG80MGpFWVhFQWRqWmI4S0dDR0wrOGxJMkxCamlPQkRYWUd6bFZ1d3plOTJ2Rll2SEFDTWNSMGcyemNydGt5c3NlRkdNWWZaUkl2V3JocVZXQ1BCSlVET0NQQ3FBNUJZQSt4ejI2REZZdz09PC9kYXRhPgoJPC9hcnJheT4KCgk8a2V5PkRFUi1FbmNvZGVkLVByb2ZpbGU8L2tleT4KCTxkYXRhPk1JSU5tZ1lKS29aSWh2Y05BUWNDb0lJTml6Q0NEWWNDQVFFeERUQUxCZ2xnaGtnQlpRTUVBZ0V3Z2dOWkJna3Foa2lHOXcwQkJ3R2dnZ05LQklJRFJqR0NBMEl3REF3SFZtVnljMmx2YmdJQkFUQU5EQWhRVUZGRGFHVmphd0VCQURBUURBcFVhVzFsVkc5TWFYWmxBZ0lCYkRBVERBNUpjMWhqYjJSbFRXRnVZV2RsWkFFQkFEQVdEQWhVWldGdFRtRnRaUXdLWW1GcFkzVnVJR3hwYmpBYURBbEJjSEJKUkU1aGJXVU1EV052YlZKWFIwSkdXa0V5V1U0d0hRd01RM0psWVhScGIyNUVZWFJsRncweU5URXdNVGN3TWpFMk5EUmFNQjRNRGxSbFlXMUpaR1Z1ZEdsbWFXVnlNQXdNQ2xKWFIwSkdXa0V5V1U0d0h3d09SWGh3YVhKaGRHbHZia1JoZEdVWERUSTJNVEF4TnpBeU1EUXpPVm93SUF3WFVISnZabWxzWlVScGMzUnlhV0oxZEdsdmJsUjVjR1VNQlZOVVQxSkZNQ0VNQ0ZCc1lYUm1iM0p0TUJVTUEybFBVd3dFZUhKUFV3d0lkbWx6YVc5dVQxTXdJZ3dFVG1GdFpRd2FZMjl0VWxkSFFrWmFRVEpaVGw5a2FYTmZNakF5TlRFd01UWXdLd3diUVhCd2JHbGpZWFJwYjI1SlpHVnVkR2xtYVdWeVVISmxabWw0TUF3TUNsSlhSMEpHV2tFeVdVNHdMQXdFVlZWSlJBd2tNMkU1WW1Ga01UTXROVGszWmkwME1HSTFMV0ppTVRVdE16bGtaalJqWVdJek1tTTNNRHNNRlVSbGRtVnNiM0JsY2tObGNuUnBabWxqWVhSbGN6QWlCQ0MwNmdOTytsSWs3aXhoTVMrMDliWm1YNkpiK0RoamFjVzVzWGtPNmRVdUhEQ0NBV1VNREVWdWRHbDBiR1Z0Wlc1MGMzQ0NBVk1DQVFHd2dnRk1NRE1NRm1Gd2NHeHBZMkYwYVc5dUxXbGtaVzUwYVdacFpYSU1HVkpYUjBKR1drRXlXVTR1WTI5dExsSlhSMEpHV2tFeVdVNHdIUXdQWVhCekxXVnVkbWx5YjI1dFpXNTBEQXB3Y205a2RXTjBhVzl1TUJnTUUySmxkR0V0Y21Wd2IzSjBjeTFoWTNScGRtVUJBZjh3TEF3ZlkyOXRMbUZ3Y0d4bExtUmxkbVZzYjNCbGNpNWhjSEJzWlhOcFoyNXBiakFKREFkRVpXWmhkV3gwTUNzTUptTnZiUzVoY0hCc1pTNWtaWFpsYkc5d1pYSXVZWE56YjJOcFlYUmxaQzFrYjIxaGFXNXpEQUVxTURFTUkyTnZiUzVoY0hCc1pTNWtaWFpsYkc5d1pYSXVkR1ZoYlMxcFpHVnVkR2xtYVdWeURBcFNWMGRDUmxwQk1sbE9NQk1NRG1kbGRDMTBZWE5yTFdGc2JHOTNBUUVBTURrTUZtdGxlV05vWVdsdUxXRmpZMlZ6Y3kxbmNtOTFjSE13SHd3TVVsZEhRa1phUVRKWlRpNHFEQTlqYjIwdVlYQndiR1V1ZEc5clpXNmdnZ2c4TUlJQ1F6Q0NBY21nQXdJQkFnSUlMY1g4aU5MRlM1VXdDZ1lJS29aSXpqMEVBd013WnpFYk1Ca0dBMVVFQXd3U1FYQndiR1VnVW05dmRDQkRRU0F0SUVjek1TWXdKQVlEVlFRTERCMUJjSEJzWlNCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVUTUJFR0ExVUVDZ3dLUVhCd2JHVWdTVzVqTGpFTE1Ba0dBMVVFQmhNQ1ZWTXdIaGNOTVRRd05ETXdNVGd4T1RBMldoY05Nemt3TkRNd01UZ3hPVEEyV2pCbk1Sc3dHUVlEVlFRRERCSkJjSEJzWlNCU2IyOTBJRU5CSUMwZ1J6TXhKakFrQmdOVkJBc01IVUZ3Y0d4bElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TVJNd0VRWURWUVFLREFwQmNIQnNaU0JKYm1NdU1Rc3dDUVlEVlFRR0V3SlZVekIyTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFpQTJJQUJKanBMejFBY3FUdGt5SnlnUk1jM1JDVjhjV2pUbkhjRkJiWkR1V21CU3AzWkh0ZlRqalR1eHhFdFgvMUg3WXlZbDNKNllSYlR6QlBFVm9BL1ZoWURLWDFEeXhOQjBjVGRkcVhsNWR2TVZ6dEs1MTdJRHZZdVZUWlhwbWtPbEVLTWFOQ01FQXdIUVlEVlIwT0JCWUVGTHV3M3FGWU00aWFwSXFaM3I2OTY2L2F5eVNyTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RGdZRFZSMFBBUUgvQkFRREFnRUdNQW9HQ0NxR1NNNDlCQU1EQTJnQU1HVUNNUUNENmNIRUZsNGFYVFFZMmUzdjlHd09BRVpMdU4reVJoSEZELzNtZW95aHBtdk93Z1BVblBXVHhuUzRhdCtxSXhVQ01HMW1paERLMUEzVVQ4Mk5RejYwaW1PbE0yN2piZG9YdDJRZnlGTW0rWWhpZERrTEYxdkxVYWdNNkJnRDU2S3lLRENDQXVZd2dnSnRvQU1DQVFJQ0NETU43dmkvVEdndU1Bb0dDQ3FHU000OUJBTURNR2N4R3pBWkJnTlZCQU1NRWtGd2NHeGxJRkp2YjNRZ1EwRWdMU0JITXpFbU1DUUdBMVVFQ3d3ZFFYQndiR1VnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa3hFekFSQmdOVkJBb01Da0Z3Y0d4bElFbHVZeTR4Q3pBSkJnTlZCQVlUQWxWVE1CNFhEVEUzTURJeU1qSXlNak15TWxvWERUTXlNREl4T0RBd01EQXdNRm93Y2pFbU1DUUdBMVVFQXd3ZFFYQndiR1VnVTNsemRHVnRJRWx1ZEdWbmNtRjBhVzl1SUVOQklEUXhKakFrQmdOVkJBc01IVUZ3Y0d4bElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TVJNd0VRWURWUVFLREFwQmNIQnNaU0JKYm1NdU1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQVpycEZadmZaOG4wYzQyanBJYlZzMVVObVJLeVpSb21mckpJSDdpOVZnUDNPSnE2eGxITHk3dk82UUJ0QUVUUkh4YUpxMmduQ2tsaXVYbUJtOVBmRnFqZ2Zjd2dmUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWZCZ05WSFNNRUdEQVdnQlM3c042aFdET0ltcVNLbWQ2K3ZldXYyc3NrcXpCR0JnZ3JCZ0VGQlFjQkFRUTZNRGd3TmdZSUt3WUJCUVVITUFHR0ttaDBkSEE2THk5dlkzTndMbUZ3Y0d4bExtTnZiUzl2WTNOd01ETXRZWEJ3YkdWeWIyOTBZMkZuTXpBM0JnTlZIUjhFTURBdU1DeWdLcUFvaGlab2RIUndPaTh2WTNKc0xtRndjR3hsTG1OdmJTOWhjSEJzWlhKdmIzUmpZV2N6TG1OeWJEQWRCZ05WSFE0RUZnUVVla2U2T0lvVkpFZ2lSczIranhva2V6UURLbWt3RGdZRFZSMFBBUUgvQkFRREFnRUdNQkFHQ2lxR1NJYjNZMlFHQWhFRUFnVUFNQW9HQ0NxR1NNNDlCQU1EQTJjQU1HUUNNQlVNcVk3R3I1WnBhNmVmM1Z6VUExbHNybExVWU1hTGR1QzN4YUx4Q1h6Z211TnJzZU44TWNRbmVxZU9pZjJyZHdJd1lUTWc4U24vK1ljeXJpbklaRDEyZTFHazBnSXZkcjVnSXBIeDFUcDEzTFRpeGlxVy9zWUozRXBQMVNUdy9NcXlNSUlEQnpDQ0FxMmdBd0lCQWdJSUY0Q29OR1prNnNzd0NnWUlLb1pJemowRUF3SXdjakVtTUNRR0ExVUVBd3dkUVhCd2JHVWdVM2x6ZEdWdElFbHVkR1ZuY21GMGFXOXVJRU5CSURReEpqQWtCZ05WQkFzTUhVRndjR3hsSUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVNUk13RVFZRFZRUUtEQXBCY0hCc1pTQkpibU11TVFzd0NRWURWUVFHRXdKVlV6QWVGdzB5TkRFeE1qQXdNekl3TkRWYUZ3MHlPREV5TVRReE9EQXdNekJhTUU0eEtqQW9CZ05WQkFNTUlWZFhSRklnVUhKdmRtbHphVzl1YVc1bklGQnliMlpwYkdVZ1UybG5ibWx1WnpFVE1CRUdBMVVFQ2d3S1FYQndiR1VnU1c1akxqRUxNQWtHQTFVRUJoTUNWVk13V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQxbEZzT3dkUlVQeG5lUm1BbFh6Nk9LYzlzVDVQVkhMZDl0bEpmSCtIN1l3R3lnaHVvb1U2MDArM3ZWcmtYMUpqTllMZk9UcW0zT2xkMlUrZ3pRNjk5bzRJQlR6Q0NBVXN3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlI2UjdvNGloVWtTQ0pHemI2UEdpUjdOQU1xYVRCQkJnZ3JCZ0VGQlFjQkFRUTFNRE13TVFZSUt3WUJCUVVITUFHR0pXaDBkSEE2THk5dlkzTndMbUZ3Y0d4bExtTnZiUzl2WTNOd01ETXRZWE5wWTJFME1ETXdnWllHQTFVZElBU0JqakNCaXpDQmlBWUpLb1pJaHZkalpBVUJNSHN3ZVFZSUt3WUJCUVVIQWdJd2JReHJWR2hwY3lCalpYSjBhV1pwWTJGMFpTQnBjeUIwYnlCaVpTQjFjMlZrSUdWNFkyeDFjMmwyWld4NUlHWnZjaUJtZFc1amRHbHZibk1nYVc1MFpYSnVZV3dnZEc4Z1FYQndiR1VnVUhKdlpIVmpkSE1nWVc1a0wyOXlJRUZ3Y0d4bElIQnliMk5sYzNObGN5NHdIUVlEVlIwT0JCWUVGT2xTemcyd3hvZ2FaVXE0bXhHUDhkd2VSeFI4TUE0R0ExVWREd0VCL3dRRUF3SUhnREFQQmdrcWhraUc5Mk5rREJNRUFnVUFNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUUR2bXJ4ZG9GcG1iR1M1elRlVHFWTzBOOFhIYk9HRCtoY2EzZ3M5MXF0b1pnSWdlQ1BadzRnSFNUMzErNG1Qa0c1WTRGZWZZLzlZNGRhUFhKaGoxam8rUDUweGdnSFVNSUlCMEFJQkFUQitNSEl4SmpBa0JnTlZCQU1NSFVGd2NHeGxJRk41YzNSbGJTQkpiblJsWjNKaGRHbHZiaUJEUVNBME1TWXdKQVlEVlFRTERCMUJjSEJzWlNCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVUTUJFR0ExVUVDZ3dLUVhCd2JHVWdTVzVqTGpFTE1Ba0dBMVVFQmhNQ1ZWTUNDQmVBcURSbVpPckxNQXNHQ1dDR1NBRmxBd1FDQWFDQjV6QVlCZ2txaGtpRzl3MEJDUU14Q3dZSktvWklodmNOQVFjQk1Cd0dDU3FHU0liM0RRRUpCVEVQRncweU5URXdNVGN3TWpFMk5EUmFNQ2dHQ1NxR1NJYjNEUUVKTkRFYk1Ca3dDd1lKWUlaSUFXVURCQUlCb1FvR0NDcUdTTTQ5QkFNQ01DOEdDU3FHU0liM0RRRUpCREVpQkNBZVRyQ2JZWmt6R2tZbGk4SytrbGtuNW16WGRlbzZlNkdIUG5XUkxEQjFqREJTQmdrcWhraUc5dzBCQ1E4eFJUQkRNQW9HQ0NxR1NJYjNEUU1ITUE0R0NDcUdTSWIzRFFNQ0FnSUFnREFOQmdncWhraUc5dzBEQWdJQlFEQUhCZ1VyRGdNQ0J6QU5CZ2dxaGtpRzl3MERBZ0lCS0RBS0JnZ3Foa2pPUFFRREFnUklNRVlDSVFDVGRwRjRLbFB0MXU0UkxSdjd1T3ErbHU2KzR2K3MveG9RRjdvaXN5MVlYd0loQUsvcFlBSTV6R3VobnlreWxkL3NaNUVkM1pQNThXTW50ei9SODFBaU81cWk8L2RhdGE+CgkJCQkJCQkJCQkJCQkJCQkJCQoJCQk8a2V5PlBQUUNoZWNrPC9rZXk+Cgk8ZmFsc2UvPgoKCTxrZXk+RW50aXRsZW1lbnRzPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmJldGEtcmVwb3J0cy1hY3RpdmU8L2tleT4KCQk8dHJ1ZS8+CgkJCQkKCQkJCTxrZXk+YXBzLWVudmlyb25tZW50PC9rZXk+CgkJPHN0cmluZz5wcm9kdWN0aW9uPC9zdHJpbmc+CgkJCQkKCQkJCTxrZXk+Y29tLmFwcGxlLmRldmVsb3Blci5hc3NvY2lhdGVkLWRvbWFpbnM8L2tleT4KCQk8c3RyaW5nPio8L3N0cmluZz4KCQkJCQoJCQkJPGtleT5hcHBsaWNhdGlvbi1pZGVudGlmaWVyPC9rZXk+CgkJPHN0cmluZz5SV0dCRlpBMllOLmNvbS5SV0dCRlpBMllOPC9zdHJpbmc+CgkJCQkKCQkJCTxrZXk+a2V5Y2hhaW4tYWNjZXNzLWdyb3Vwczwva2V5PgoJCTxhcnJheT4KCQkJCTxzdHJpbmc+UldHQkZaQTJZTi4qPC9zdHJpbmc+CgkJCQk8c3RyaW5nPmNvbS5hcHBsZS50b2tlbjwvc3RyaW5nPgoJCTwvYXJyYXk+CgkJCQkKCQkJCTxrZXk+Z2V0LXRhc2stYWxsb3c8L2tleT4KCQk8ZmFsc2UvPgoJCQkJCgkJCQk8a2V5PmNvbS5hcHBsZS5kZXZlbG9wZXIudGVhbS1pZGVudGlmaWVyPC9rZXk+CgkJPHN0cmluZz5SV0dCRlpBMllOPC9zdHJpbmc+CgkJCQkKCQkJCTxrZXk+Y29tLmFwcGxlLmRldmVsb3Blci5hcHBsZXNpZ25pbjwva2V5PgoJCTxhcnJheT4KCQkJCTxzdHJpbmc+RGVmYXVsdDwvc3RyaW5nPgoJCTwvYXJyYXk+CgkJCgk8L2RpY3Q+Cgk8a2V5PkV4cGlyYXRpb25EYXRlPC9rZXk+Cgk8ZGF0ZT4yMDI2LTEwLTE3VDAyOjA0OjM5Wjwv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


          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa

          
      # - name: Upload using iTMSTransporter
      #   env:
      #     WORKING_DIRECTORY: build/ios/ipa
      #     IPA_FILE_NAME: oiyo.ipa
      #     APPLE_USERNAME: Nina2000HH@outlook.com
      #     APPLE_PASSWORD: zeqo-kyio-mlkw-kbwf
      #     APPLE_ASC_PROVIDER: 798RL7J5U7
      #   run: |
      #     cd $WORKING_DIRECTORY
      #     git clone https://github.com/ZhangLi1984/itsm.git
      #     ./itsm/bin/iTMSTransporter -assetFile $IPA_FILE_NAME -u $APPLE_USERNAME -p $APPLE_PASSWORD -m upload -asc_provider $APPLE_ASC_PROVIDER -v verbose

      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/nive.ipa"
          APPLE_ID: "tigerttb@outlook.com"
          APP_SPECIFIC_PASSWORD: "wqvk-utuw-tjun-cqtr"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
